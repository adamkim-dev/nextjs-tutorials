import { Trip } from "@/app/models";
import { NextRequest, NextResponse } from "next/server";

const API_URL = "http://localhost:3001";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  // L·∫•y d·ªØ li·ªáu trip t·ª´ json-server
  const tripResponse = await fetch(`${API_URL}/trips/${id}`);
  console.log("üöÄ ~ GET ~ tripResponse:", tripResponse);

  if (!tripResponse.ok) {
    return NextResponse.json({ error: "Trip not found" }, { status: 404 });
  }

  // L·∫•y d·ªØ li·ªáu trip
  const trip = await tripResponse.json();

  // N·∫øu d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß (ch·ªâ c√≥ id v√† status), l·∫•y l·∫°i to√†n b·ªô d·ªØ li·ªáu
  if (trip && Object.keys(trip).length <= 2 && trip.id && trip.status) {
    // L·∫•y t·∫•t c·∫£ trips
    const allTripsResponse = await fetch(`${API_URL}/trips`);
    if (allTripsResponse.ok) {
      const allTrips = await allTripsResponse.json();
      // T√¨m trip ƒë·∫ßy ƒë·ªß theo id
      const fullTrip = allTrips.find((t: Trip) => t.id === id);
      if (fullTrip) {
        return NextResponse.json(fullTrip);
      }
    }
  }

  // Tr·∫£ v·ªÅ d·ªØ li·ªáu trip ƒë√£ l·∫•y ƒë∆∞·ª£c
  return NextResponse.json(trip);
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  const tripId = id;
  const updatedFields = await request.json();

  // L·∫•y d·ªØ li·ªáu trip hi·ªán t·∫°i
  const tripResponse = await fetch(`${API_URL}/trips/${tripId}`);

  if (!tripResponse.ok) {
    return NextResponse.json({ error: "Trip not found" }, { status: 404 });
  }

  const currentTrip = await tripResponse.json();

  // K·∫øt h·ª£p d·ªØ li·ªáu hi·ªán t·∫°i v·ªõi c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t
  const mergedTrip = { ...currentTrip, ...updatedFields };

  // G·ª≠i d·ªØ li·ªáu ƒë√£ k·∫øt h·ª£p ƒë·∫øn json-server
  const response = await fetch(`${API_URL}/trips/${tripId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(mergedTrip),
  });

  if (!response.ok) {
    return NextResponse.json(
      { error: "Failed to update trip" },
      { status: 500 }
    );
  }

  // L·∫•y d·ªØ li·ªáu trip sau khi c·∫≠p nh·∫≠t
  const updatedTripResponse = await fetch(`${API_URL}/trips/${tripId}`);
  if (!updatedTripResponse.ok) {
    return NextResponse.json(
      { error: "Failed to get updated trip" },
      { status: 500 }
    );
  }

  const updatedTrip = await updatedTripResponse.json();

  // N·∫øu d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß (ch·ªâ c√≥ id v√† status), l·∫•y l·∫°i to√†n b·ªô d·ªØ li·ªáu
  if (
    updatedTrip &&
    Object.keys(updatedTrip).length <= 2 &&
    updatedTrip.id &&
    updatedTrip.status
  ) {
    // L·∫•y t·∫•t c·∫£ trips
    const allTripsResponse = await fetch(`${API_URL}/trips`);
    if (allTripsResponse.ok) {
      const allTrips = await allTripsResponse.json();
      // T√¨m trip ƒë·∫ßy ƒë·ªß theo id
      const fullTrip = allTrips.find((t: Trip) => t.id === tripId);
      if (fullTrip) {
        return NextResponse.json(fullTrip);
      }
    }
  }

  return NextResponse.json(updatedTrip);
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  const response = await fetch(`${API_URL}/trips/${id}`, {
    method: "DELETE",
  });

  if (!response.ok) {
    return NextResponse.json({ error: "Trip not found" }, { status: 404 });
  }

  return NextResponse.json(await response.json());
}
